<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body>
    <%- include('./navbar.ejs')  %>

    <br>
    <div class="container">
        <div id="reader" width="600px"></div>

    </div>
    <script src="/qrcode/html5-qrcode.min.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <script>


        function onScanSuccess(decodedText, decodedResult) {
            html5QrcodeScanner.clear()
            console.log(`Code matched = ${decodedText}`, decodedResult);
            showData(decodedText)
        }

        function onScanFailure(error) {
            console.warn(`Code scan error = ${error}`);
        }

        let html5QrcodeScanner = new Html5QrcodeScanner(
            "reader",
            {
                fps: 10, qrbox: { width: 500, height: 500 },
            },

  /* verbose= */ false);

        function showData(barcode) {
            const options = {
                method: "GET",
                headers: { "Content-Type": "application/json" },
            }
            fetch(`/api/v1/scan/${barcode}`, options)
                .then(response => response.json())
                .then(resp => {
                    if (resp.error) {
                        Swal.fire({
                            title: resp.message,
                            icon: 'info',
                            confirmButtonText: 'Kembali',
                            allowOutsideClick: false,

                        }).then((result) => {
                            /* Read more about isConfirmed, isDenied below */
                            if (result.isConfirmed) {
                                window.location.reload(true);
                            }
                        })

                        // Menutup akses kamera.
                    } else {
                        if (resp.data.event == 'fr') {
                            Event = 'FUN RUN'
                        } else {
                            Event = 'FUN WALK'
                        }

                        if (resp.data.flag_racepack) {
                            Internal = 'Internal'
                        } else {
                            Internal = 'Umum'
                        }

                        let nipStr = ''
                        if (resp.data.peserta.flag_internal) {
                            nipStr = `<label id="" class="form-label mt-1">Nip</label>
                                <input readonly value="${resp.data.peserta.nip}" type="text" class="form-control" />`
                        }

                        let checkinStr = ''
                        let confirmButton = true
                        if (resp.data.peserta.flag_checkin) {
                            checkinStr = '<span style="color: red;">*Barcode ini sudah pernah di scan sebelumnya</span>'
                            confirmButton = false
                        }

                        let pendampingStr = ''

                        if (resp.data.peserta.event == "fw" && resp.data.peserta.flag_internal) {
                            pendampingStr = `<br><details><summary>Lihat Pendamping</summary>`
                            for (let i = 0; i < resp.data.pendamping.length; i++) {
                                pendampingStr = pendampingStr + `
                                <div class="row mt-4">
                                    <label id="lbl_pendamping_1" class="form-label">
                                        Pendamping ${i + 1}
                                    </label>
                                    <div class="d-flex flex-column align-items-start mt-4">
                                    <label id="lbl_nama_pendamping_1" class="form-label">
                                        Nama Pendamping
                                    </label>
                                    <input readonly value="${resp.data.pendamping[i].nama}" type="text" class="form-control" />
                                    <label id="lbl_nama_pendamping_1" class="form-label">
                                        Ukuran
                                    </label>
                                    <input readonly value="${resp.data.pendamping[i].ukuran}" type="text" class="form-control" />
                                    </div>
                                </div>`
                            } + '</details > '
                        }

                        let htmlStr = `<h6 class="price my-3">${Event} </h6> ${checkinStr}
                        <div class="price my-3">Nomor Peserta</div>
                        <div class="price my-3" > ${resp.data.peserta.no_peserta}</div> 
                        <div class="row mt-4" style="text-align: left;">
                            <div class="flex-column align-items-start mt-4">
                                <label id="" class="form-label mt-1">Nama</label>
                                <input readonly value="${resp.data.peserta.nama}" type="text" class="form-control" />
                                <label id="" class="form-label mt-1">NIK</label>
                                <input readonly value="${resp.data.peserta.nik}" type="text" class="form-control" />
                                ${nipStr}
                                <label id="" class="form-label mt-1">Ukuran</label>
                                <input readonly value="${resp.data.peserta.ukuran}" type="text" class="form-control" />
                            </div>
                        </div>
                        ${pendampingStr}`


                        Swal.fire({
                            title: resp.message,
                            icon: 'success',
                            allowOutsideClick: false,
                            confirmButtonText: 'Konfirmasi Data',
                            showCancelButton: true,
                            showConfirmButton: confirmButton,
                            cancelButtonColor: '#d33',
                            cancelButtonText: 'Kembali',
                            html: htmlStr


                        }).then((result) => {
                            /* Read more about isConfirmed, isDenied below */
                            if (result.isConfirmed) {
                                fetch(`/api/v1/checkin/${barcode}`, options)
                                    .then(response => response.json())
                                    .then(resp => {
                                        window.location.reload(true);

                                    })
                                    .catch(error => {
                                        window.location.reload(true);

                                    });
                            } else if (
                                /* Read more about handling dismissals below */
                                result.dismiss === Swal.DismissReason.cancel
                            ) {
                                window.location.reload(true);
                            }
                        })
                    }
                })
                .catch(error => {
                    console.log(error)
                    Swal.fire({
                        title: "Terjadi Kesalahan",
                        icon: 'info',
                        confirmButtonText: 'Kembali',
                        allowOutsideClick: false,
                    }).then((result) => {
                        /* Read more about isConfirmed, isDenied below */
                        if (result.isConfirmed) {
                            window.location.reload(true);
                        }
                    })
                });
        }
        html5QrcodeScanner.render(onScanSuccess, onScanFailure);    </script>
</body>



</html>